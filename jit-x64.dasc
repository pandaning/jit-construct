#include <stdint.h>
#include "util.h"

|.arch x64
|.actionlist actions
|
|// Use rbx as our cell pointer.
|// Since rbx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, rbx
|
|// Macro for calling a function.
|// In cases where our target is <=2**32 away we can use
|//   | call &addr
|// But since we don't know if it will be, we use this safe
|// sequence instead.
|.macro callp, addr
|  mov64  rax, (uintptr_t)addr
|  call   rax
|.endmacro

#define Dst &state
#define MAX_NESTING 256

int constraction(char *p)
{
	char *ptr = p;
	int count = 0;
	while(*p==*ptr)
	{
		ptr++;
		count++;
	}
	return count;
}

int clearloop(char *p)//[-]
{
    if(*(p+1) == '-' && *(p+2) == ']')
        return 1;
    return 0;
}

int copyloop(char *p)//[->>>+<<<]
{
	int offset = 0;//for > <
	int temp = 0;
	if(*(p+1) == '-')//[-
	{
		p+=2;
		while(*p!=']')
		{
			if(*p == '[' || *p == ',' || *p == '.' || *p == '-' || *p == ']') return -1;
			temp = constraction(p);
			if(*p == '>') offset += temp;
			else if(*p == '<') offset -= temp;
			if(offset != 0)return -1;

			p+=temp;
			if(*p == '+') return temp;
			return -1;
		}
	}
	return -1;
}

void removespace(char *p)
{
	int count = 0;
	while(*p)
	{
		if(*(p+count) == ' ')
		{ 
			count++;
		}
		//if *p is not ' ', move to next *p
		*p = *(p+count);//if found ' ', replace value
		p++;
	}
}

int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x64 <inputfile>");
	dasm_State *state;
	initjit(&state, actions);
	int mult;
	int copy;
	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING;
	// Function prologue.
	|  push PTR
	|  mov  PTR, rdi      // rdi store 1st argument
	char *p = read_file(argv[1]);
	for (removespace(p); *p; p++) {
		switch (*p) {
		case '>':
			mult = constraction(p);
			p += mult-1;
			if(mult==1)
				|  inc  PTR
			else
				|  add  PTR, mult
			break;
		case '<':
			mult = constraction(p);
			p += mult-1;
			if(mult==1)
				|  dec  PTR
			else
				|  sub  PTR, mult
			break;
		case '+':
			mult = constraction(p);
			p += mult-1;
			if(mult==1)
				|  inc  byte [PTR]
			else
				|  add  byte [PTR], mult
			break;
		case '-':
			mult = constraction(p);
			p += mult-1;
			if(mult==1)
				|  dec  byte [PTR]
			else
				|  sub  byte [PTR], mult
			break;
		case '.':
			|  movzx edi, byte [PTR]
			|  callp putchar
			break;
		case ',':
			|  callp getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			if (top == limit) err("Nesting too deep.");
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.
			copy = copyloop(p);
			if(clearloop(p) == 1)
			{
				| mov byte [PTR], 0
				p+=2;
				break;
			}
			if(copy!=-1)
			{
				| mov dl, byte [PTR]
				| mov byte [PTR+copy], dl
				| mov byte [PTR], 0
				p+=(5+(copy-1)*2);
				break;
			}
			maxpc += 2;
			*top++ = maxpc;
			dasm_growpc(&state, maxpc);
			|  cmp  byte [PTR], 0
			|  je   =>(maxpc-2)
			|=>(maxpc-1):
			break;
		case ']':
			if (top == pcstack) err("Unmatched ']'");
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}

	// Function epilogue.
	|  pop  PTR
	|  ret

	void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}
